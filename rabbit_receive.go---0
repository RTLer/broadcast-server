package main

import (
	"github.com/sirupsen/logrus"
	"github.com/streadway/amqp"
	"log"
)

func init() {
	var err error
	if rabbitMQ, err = amqp.Dial("amqp://guest:guest@localhost:5672/"); err != nil {
		logrus.Fatalf("Failed to amqp.Dial to RabbitMQ: %s", err)
	}
}

func main() {
	queues := []string{"success", "failed"}
	defer func() {
		if err := rabbitMQ.Close(); err != nil {
			logrus.Fatalf("Failed to rabbitMQ.Close: %s", err)
		}
	}()

	ch, chErr := rabbitMQ.Channel()
	if chErr != nil {
		logrus.Fatalf("Failed to open a channel: %s", chErr)
	}
	defer func() {
		if err := ch.Close(); err != nil {
			logrus.Fatalf("Failed to ch.Close: %s", err)
		}
	}()

	forever := make(chan bool)

	for _, qName := range queues {
		q, qErr := ch.QueueDeclare(
			qName, // name
			false, // durable
			false, // delete when unused
			false, // exclusive
			false, // no-wait
			nil,   // arguments
		)

		if qErr != nil {
			logrus.Fatalf("Failed to declare a queue: %s", qErr)
		}

		msgs, consumErr := ch.Consume(
			q.Name, // queue
			"",     // consumer
			true,   // auto-ack
			false,  // exclusive
			false,  // no-local
			false,  // no-wait
			nil,    // args
		)
		if consumErr != nil {
			logrus.Fatalf("Failed to register a consumer: %s", consumErr)
		}

		go func() {
			for d := range msgs {
				log.Printf("Received a message: %s", d.Body)
			}
		}()
	}

	log.Printf(" [*] Waiting for messages. To exit press CTRL+C")
	<-forever
}
